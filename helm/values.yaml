replicaCount: 1

image:
  repository: ruddickmg/vault-kms-provider
  pullPolicy: IfNotPresent
  tag: latest

# configurations for connecting to vault
vault:
  # the url to the running vault instance
  address: https://vault.vault.svc.cluster.local:8200
  # the key with which the encryption records will be initialized
  transitKey: vault-kms-provider
  # details for a secret that contains a vault token for vault authorization
  token:
    # if set to true the value of the secret below will be added to the vault-kms-provider containers environment variables
    set: false
    # if set to true a secret will be created with the value, name and key below. It is not secure to directly create a secret via this helm chart but this can be used for testing/debugging if necessary
    create: false
    # It is not secure to set this value directly but this can be used for testing/debugging purposes
    value: ""
    # name of the secret to be used or created, if create is set to false, the secret must be manually created by the user, this is a secure way of using the vault token directly
    name: vault-auth-token
    # the key/path within the secret where the vault token is stored
    key: token
  # configuration for tls communication with vault
  ca:
    # path to CA certificate file
    file: ""
    # path to directory containing CA certificate file(s)
    directory: /etc/ssl/certs

# Configuration for logging
logging:
  # level of logs to print, can be: none, error, warn, info, debug, or trace
  level: "info"
  # log formats, can be: json, pretty, etc..
  format: "json"

configMap:
  name: vault-kms-provider-configuration

nodeLabel:
  key: &labelKey node-role.kubernetes.io/control-plane
  value: &labelValue "true"

socket:
  name: vault-kms-provider.sock
  path: /run/sockets
  hostPath: /mnt
  permissions: any

service:
  port: &healthCheckPort 8080
  host: 0.0.0.0

socketVolume:
  name: vault-kms-provider-socket-volume
  claim: socket-volume
  storageClass: unix-socket-storage
  size: 300mi

nodeSelector:
  *labelKey: *labelValue

tolerations:
  - key: *labelKey
    operator: "Equal"
    value: *labelValue
    effect: "NoSchedule"

local:
  path: /mnt

priorityClassName: system-cluster-critical

podSecurityContext:
  fsGroup: 1001
  runAsUser: 1001
  runAsGroup: 1001
  fsGroupChangePolicy: "OnRootMismatch"

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true

livenessProbe:
  initialDelaySeconds: 5
  periodSeconds: 5
  httpGet:
    path: /health
    port: *healthCheckPort

startupProbe:
  initialDelaySeconds: 5
  failureThreshold: 30
  periodSeconds: 5
  httpGet:
    path: /health
    port: *healthCheckPort

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 3
  httpGet:
    path: /ready
    port: *healthCheckPort

serviceAccount:
  name: vault-kms-provider
  create: true
  automount: false
  annotations: {}
  token:
    name: vault-token
    path: /var/run/secrets/tokens

role:
  name: vault-kms-access
  rules: []

# for use in templating an encryption file, "output" should be always be false unless the intention is to generate a compatible encryption configuration
encryption:
  output: false
  fallback: true
  enabled: true

volumes: {}
volumeMounts: {}
podAnnotations: {}
podLabels: {}
affinity: {}
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
