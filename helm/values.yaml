# Configuration for the KMS provider image
image:
  # KMS provider repository
  repository: ruddickmg/vault-kms-provider
  # Pull policy, ensure we are always using the most up-to-date image
  pullPolicy: Always
  # Image tag
  tag: latest

# configurations for connecting to vault
vault:
  # the url to the running vault instance
  address: https://vault.vault.svc.cluster.local:8200
  # configurations for the transit gateway
  transit:
    # the key with which the encryption records will be initialized
    key: vault-kms-provider
    # the path at which the transit record is set
    path: transit
  # authentication configuration
  authentication:
    # path at which authentication is set, if set will override default paths
    path: ""
  # configuration for tls communication with vault
  ca:
    # path to CA certificate file
    file: ""
    # path to directory containing CA certificate file(s)
    directory: /etc/ssl/certs

# Configuration for logging
logging:
  # Level of logs to print, can be: none, error, warn, info, debug, or trace
  level: "info"
  # Log formats, can be: json, pretty, etc..
  format: "json"

# Configurations for the default config map
configMap:
  # Name of the default config map
  name: vault-kms-provider-configuration

# Configurations of the socket used for communication between kubernetes and the KMS provider
socket:
  # Name of the socket file
  name: vault-kms-provider.sock
  # Path to the directory where the socket will be created inside the container
  path: /run/sockets
  # File permissions set on the socket file
  permissions: any

# Service configurations, used for health checks
service:
  # Health check port
  port: &healthCheckPort 8080
  # Health check host address
  host: 0.0.0.0

# Configuration for the volume used to create/share the socket with the host machine/Kubernetes api server
socketVolume:
  # Name of the volume
  name: vault-kms-provider-socket-volume
  # Name for the persistent volume claim
  claim: socket-volume
  # Name for the storage class assigned to the volume
  storageClass: unix-socket-storage
  # Path to the directory where the volume will be mounted on the host machine
  hostPath: /mnt

# Configurations for node affinity, ensuring the KMS Provider is run on the control plane
nodeLabel:
  # The key for "matchExpressions", the label used in the node selector
  key: &labelKey node-role.kubernetes.io/control-plane
  # The value of the label used in the node selector
  value: &labelValue "true"

# Node selector configuration, ensuring the KMS Provider is run on the control plane
nodeSelector:
  *labelKey: *labelValue

# Tolerations allow the KMS Provider to run on the control plane in spite of normal anti affinity rules
tolerations:
  - key: *labelKey
    operator: "Equal"
    value: *labelValue
    effect: "NoSchedule"

# Defines the priority of the pod for the Kubernetes scheduler
priorityClassName: system-cluster-critical

podSecurityContext:
  fsGroup: 10001
  runAsUser: 10001
  runAsGroup: 10001
  fsGroupChangePolicy: "OnRootMismatch"

securityContext:
  capabilities:
    drop:
      - ALL
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true

livenessProbe:
  initialDelaySeconds: 5
  periodSeconds: 5
  httpGet:
    path: /health
    port: *healthCheckPort

startupProbe:
  initialDelaySeconds: 5
  failureThreshold: 30
  periodSeconds: 5
  httpGet:
    path: /health
    port: *healthCheckPort

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 3
  httpGet:
    path: /ready
    port: *healthCheckPort

serviceAccount:
  name: vault-kms-provider
  create: true
  automount: false
  annotations: {}
  token:
    name: vault-jwt
    path: /var/run/secrets/tokens

# Kubernetes role configuration
role:
  # Role name
  name: vault-kms-access
  # Kubernetes role permissions configuration
  rules: []

# for use in templating an encryption file, "output" should be always be false unless the intention is to generate a compatible encryption configuration
encryption:
  output: false
  fallback: true
  enabled: true

# environment variables for the container
envFrom: {}

# environment variables for the container
env: {}

volumes: {}
volumeMounts: {}
podAnnotations: {}
podLabels: {}
affinity: {}
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
