version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.1
  helm: circleci/helm@3.0.2
  rust: circleci/rust@1.6.1

#-----------------------------------------------------------------------------------------------------------------------------

executors:
  deployment:
    docker:
      - image: 'cimg/base:stable'
    environment:
      PIPELINE_NUM: << pipeline.number >>
      TZ: "America/Los_Angeles"
  chart-test:
    docker:
      - image: 'quay.io/helmpack/chart-testing:latest'
  release:
    docker:
      - image: 'quay.io/helmpack/chart-releaser:latest'
  rust-app:
    environment:
      PIPELINE_NUM: << pipeline.number >>
      TZ: "America/Los_Angeles"
    docker:
      - image: cimg/rust:1.79.0
  arm-builder:
    environment:
      PIPELINE_NUM: << pipeline.number >>
      TZ: "America/Los_Angeles"
    machine:
      image: ubuntu-2204:2024.05.1
      resource_class: arm.medium
      docker_layer_caching: true
  docker-publisher:
    environment:
      PIPELINE_NUM: << pipeline.number >>
      TZ: "America/Los_Angeles"
    docker:
      - image: circleci/buildpack-deps:stretch
  ubuntu:
    environment:
      PIPELINE_NUM: << pipeline.number >>
      TZ: "America/Los_Angeles"
    machine:
      image: ubuntu-2204:2024.05.1
      docker_layer_caching: true

#-----------------------------------------------------------------------------------------------------------------------------

workflows:
  ci-cd:
    jobs:
      - chart_formatting
      - generate_tag
      - check_formatting
      - build
      - unit_tests
      - integration_tests
      - e2e_tests:
          requires:
            - publish-manifest
      - check_version:
          filters:
            branches:
              ignore:
                - main
      - publish-arm:
          requires:
            - generate_tag
            - check_version
            - chart_formatting
            - check_formatting
            - build
            - unit_tests
            - integration_tests
          context:
            - dockerhub

      - publish-amd:
          requires:
            - generate_tag
            - check_version
            - check_formatting
            - chart_formatting
            - build
            - unit_tests
            - integration_tests
          context:
            - dockerhub

      - publish-manifest:
          context:
            - dockerhub
          requires:
            - publish-amd
            - publish-arm

      - publish-manifest:
          name: publish-latest-manifest
          tag: latest
          filters:
            branches:
              only:
                - main
          context:
            - dockerhub
          requires:
            - publish-amd
            - publish-arm

      - release:
          filters:
            branches:
              only:
                - main
          requires:
            - publish-latest-manifest
            - chart_formatting

#-----------------------------------------------------------------------------------------------------------------------------

jobs:
  release:
    executor: release
    steps:
      - checkout
      - run:
          name: Install ssh
          command: apk add openssh-client
      - run:
          name: Configure git
          command: |
            git remote set-url origin https://github.com/Ruddickmg/vault-kms-provider.git
            git config --global user.email "ruddickmg@gmail.com"
            git config --global user.name "Marcus Ruddick"
      - run:
          name: Package chart
          command: |
            cr package ./helm
      - run:
          name: Release chart
          command: |
            cr upload --generate-release-notes --skip-existing \
              --commit $CIRCLE_BRANCH \
              --git-repo $CIRCLE_PROJECT_REPONAME \
              --owner $CIRCLE_PROJECT_USERNAME \
              --release-name-template "v{{ .Version }}" \
              --token $GITHUB_TOKEN
      - run:
          name: Add chart to gh-pages
          command: |
            mkdir .cr-index
            cr index --push \
              --git-repo $CIRCLE_PROJECT_REPONAME \
              --owner $CIRCLE_PROJECT_USERNAME \
              --token $GITHUB_TOKEN

  build:
    executor: rust-app
    steps:
      - checkout
      - run:
          name: Update
          command: sudo apt-get update
      - run:
          name: Install proto
          command: sudo apt-get install protobuf-compiler
      - restore_cache:
          key: project-cache
      - run:
          name: Stable Build
          command: cargo build
      - save_cache:
          key: project-cache
          paths:
            - "~/.cargo"
            - "./target"

  check_version:
    executor: ubuntu
    environment:
      MAIN_BRANCH_URL: git@github.com:Ruddickmg/vault-kms-provider.git
    steps:
      - checkout
      - run:
          name: Checkout main
          command: git clone "$MAIN_BRANCH_URL"
      - run:
          name: Check that version has changed
          command: |
            export MAIN_VERSION="$(cat ./vault-kms-provider/Cargo.toml | grep -oP '^version = "\K[^"]+')"
            export MAIN_CHART_VERSION="$(cat ./vault-kms-provider/helm/Chart.yaml | grep '^version:' | awk '{print $2}')"
            export BRANCH_VERSION="$(cat ./Cargo.toml | grep -oP '^version = "\K[^"]+')"
            export BRANCH_CHART_VERSION="$(cat helm/Chart.yaml | grep '^version:' | awk '{print $2}')"
            if [ "$MAIN_VERSION" = "$BRANCH_VERSION" ]; then
              if [ "$MAIN_CHART_VERSION" = "$BRANCH_CHART_VERSION" ]; then exit 1; else exit 0; fi
            else
              exit 0;
            fi
      - run:
          name: Check matching app versions
          command: |
            export BRANCH_VERSION="$(cat ./Cargo.toml | grep -oP '^version = "\K[^"]+')"
            export CHART_APP_VERSION="$(cat helm/Chart.yaml | grep -oP '^appVersion: "\K[^"]+')"
            if [ "$BRANCH_VERSION" = "$CHART_APP_VERSION" ]; then exit 0; else exit 1; fi

  generate_tag:
    executor: ubuntu
    steps:
      - checkout
      - run:
          name: Create workspace
          command: mkdir /tmp/workspace
      - run:
          name: Generate Tag
          command: |
            VERSION="v$(cat ./Cargo.toml | grep -oP '^version = "\K[^"]+')"
            TIME_STAMP="$(printf '%(%d.%m.%Y)T\n' -1)"
            TAG="$VERSION-$PIPELINE_NUM-$TIME_STAMP"
            echo $TAG >> /tmp/workspace/docker_tag
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - docker_tag

  check_formatting:
    executor: rust-app
    steps:
      - checkout
      - run:
          name: Check formatting
          command: cargo fmt -- --check

  chart_formatting:
    executor: chart-test
    steps:
      - checkout
      - run:
          name: Lint helm chart
          command: ct lint --all --chart-dirs .

  unit_tests:
    executor: ubuntu
    steps:
      - checkout
      - rust/install
      - run:
          name: Run unit tests
          command: cargo test --bins --lib

  integration_tests:
    executor: ubuntu
    steps:
      - checkout
      - run:
          name: Start vault and kms provider
          command: docker compose up -d
      - rust/install
      - run:
          name: Enable transit
          command: docker compose exec vault vault secrets enable transit
      - run:
          name: Run integration tests
          command: cargo test --test '*'

  e2e_tests:
    executor: ubuntu
    environment:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      SOCKET_FILE: /mnt/vault-kms-provider.sock
      ENCRYPTION_CONFIG: /tmp/encryption/configuration.yaml
      K3S_DATASTORE_ENDPOINT: https://127.0.0.1:2379
      K3S_DATASTORE_CAFILE: /tmp/certs/server.crt
      K3S_DATASTORE_CERTFILE: /tmp/certs/client.crt
      K3S_DATASTORE_KEYFILE: /tmp/certs/client.key
      ETCDCTL_ENDPOINTS: https://127.0.0.1:2379
      ETCDCTL_CACERT: /tmp/certs/server.crt
      ETCDCTL_CERT: /tmp/certs/client.crt
      ETCDCTL_KEY: /tmp/certs/client.key
      ETCDCTL_API: 3
      CERTS: /tmp/certs
    steps:
      - checkout
      - run:
          name: Set up certificates
          command: |
            cp -r ./helm/test_files/certs $CERTS
            ls $CERTS
      - run:
          name: Run etcd
          command: docker compose -f ./helm/test_files/docker-compose.etcd.yml up -d
      - run:
          name: Install k3s
          command: curl -sfL https://get.k3s.io | sh -
      - helm/install_helm_client:
          version: v3.15.1
      - run:
          name: Grant permissions on kube config
          command: sudo chown $USER:$USER $KUBECONFIG
      - run:
          name: Deploy vault
          command: |
            helm repo add hashicorp https://helm.releases.hashicorp.com
            helm install vault hashicorp/vault -n vault --create-namespace --set "server.dev.enabled=true"
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Deploy vault-kms-provider
          command: |
            helm install vault-kms-provider ./helm -n vault \
              --set "image.tag=$(cat /tmp/workspace/docker_tag)" \
              --set "role.rules[0].apiGroups={}" \
              --set "role.rules[0].resources={secrets}" \
              --set "role.rules[0].verbs={get,create}"
      - run:
          name: Wait for installation
          command: sleep 30
      - run:
          name: Check for socket file
          command: |
            ls /mnt
#            if [ -e  "$SOCKET_FILE" ]; then
#              exit 0
#            else
#              exit 1
#            fi
      - run:
          name: Create encryption configuration file
          command: |
            mkdir /tmp/encryption
            helm template -s templates/configurations/encryption-configuration.yaml ./helm --set "socket.output=true" > $ENCRYPTION_CONFIG
      - run:
          name: Configure k3s encryption
          command: |
            curl -sfL https://get.k3s.io | sh -s - \
              --write-kubeconfig-mode 777 \
              --kube-apiserver-arg=encryption-provider-config=$ENCRYPTION_CONFIG
      - run:
          name: Wait for startup
          command: sleep 5
      - run:
          name: Run e2e tests
          command: |
            helm test vault-kms-provider -n vault --logs

  publish-amd:
    executor: ubuntu
    environment:
      ARCH: amd64
      PLATFORM: linux/amd64
    steps:
      - checkout
      - run:
          name: Log in to Docker
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build
          command: |
            TAG="$(cat /tmp/workspace/docker_tag)"
            docker build \
              --build-arg TARGETPLATFORM=$PLATFORM \
              -t "${DOCKERHUB_REPOSITORY}:${TAG}-${ARCH}" .
      - run:
          name: Publish
          command: |
            TAG="$(cat /tmp/workspace/docker_tag)"
            docker push "${DOCKERHUB_REPOSITORY}:${TAG}-${ARCH}"

  publish-arm:
    executor: arm-builder
    environment:
      ARCH: arm64
      PLATFORM: linux/arm64
    steps:
      - checkout
      - run:
          name: Log in to Docker
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build
          command: |
            TAG="$(cat /tmp/workspace/docker_tag)"
            docker build \
              --build-arg TARGETPLATFORM=$PLATFORM \
              -t "${DOCKERHUB_REPOSITORY}:${TAG}-${ARCH}" .
      - run:
          name: Publish
          command: |
            TAG="$(cat /tmp/workspace/docker_tag)"
            docker push "${DOCKERHUB_REPOSITORY}:${TAG}-${ARCH}"

  publish-manifest:
    executor: ubuntu
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    parameters:
      tag:
        default: ""
        description: "Tag for the manifest"
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Log in to Docker
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Create Manifest
          command: |
            if [[ -z "<< parameters.tag >>" ]]; then
              export TAG="$(cat /tmp/workspace/docker_tag)"
            else
              export TAG="<< parameters.tag >>"
            fi
            REPO="$DOCKERHUB_REPOSITORY:$TAG"
            docker manifest create $REPO \
              --amend "${REPO}-arm64" \
              --amend "${REPO}-amd64"
      - run:
          name: Show Manifest
          command: |
            if [[ -z "<< parameters.tag >>" ]]; then
              export TAG="$(cat /tmp/workspace/docker_tag)"
            else
              export TAG="<< parameters.tag >>"
            fi
            docker manifest inspect "${DOCKERHUB_REPOSITORY}:${TAG}"
      - run:
          name: Publish Manifest
          command: |
            if [[ -z "<< parameters.tag >>" ]]; then
              export TAG="$(cat /tmp/workspace/docker_tag)"
            else
              export TAG="<< parameters.tag >>"
            fi
            docker manifest push "${DOCKERHUB_REPOSITORY}:${TAG}"
