version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.1
  helm: circleci/helm@3.1.0
  rust: circleci/rust@1.6.2
  codecov: codecov/codecov@5.0.3

#-----------------------------------------------------------------------------------------------------------------------------

executors:
  deployment:
    docker:
      - image: 'cimg/base:stable'
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    environment:
      PIPELINE_NUM: << pipeline.number >>
      TZ: "America/Los_Angeles"
  chart_test:
    docker:
      - image: 'quay.io/helmpack/chart-testing:latest'
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  release:
    docker:
      - image: 'quay.io/helmpack/chart-releaser:latest'
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  node:
    docker:
      - image: node:lts
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  rust:
    environment:
      PIPELINE_NUM: << pipeline.number >>
      TZ: "America/Los_Angeles"
    docker:
      - image: cimg/rust:1.84.0
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  arm_builder:
    resource_class: arm.large
    environment:
      PIPELINE_NUM: << pipeline.number >>
      TZ: "America/Los_Angeles"
    machine:
      image: ubuntu-2204:2024.05.1
      docker_layer_caching: true
  ubuntu:
    resource_class: large
    environment:
      PIPELINE_NUM: << pipeline.number >>
      TZ: "America/Los_Angeles"
    machine:
      image: ubuntu-2204:2024.05.1
      docker_layer_caching: true
  ubuntu_small:
    environment:
      PIPELINE_NUM: << pipeline.number >>
      TZ: "America/Los_Angeles"
    machine:
      image: ubuntu-2204:2024.05.1
      docker_layer_caching: true

#-----------------------------------------------------------------------------------------------------------------------------

commands:
  increment_version:
    steps:
      - run:
          name: Increment version
          command: |
            if [[ "$(git log -1 --pretty=%B)" != *"[skip ci] increment version"* ]]; then
              node version/increment.js "$(git log -1 --pretty=%B)"
            fi
  checkout_main:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:ikYE/tBNMyIEGqxtAetAV3NW80GFZoioglYDTbyiNG0"
      - run:
          name: Checkout main
          command: git clone "git@github.com:Ruddickmg/vault-kms-provider.git"
  checkout_write:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:ikYE/tBNMyIEGqxtAetAV3NW80GFZoioglYDTbyiNG0"
      - checkout

#-----------------------------------------------------------------------------------------------------------------------------

workflows:
  ci_cd:
    jobs:
      - benchmark
      - chart_formatting
      - generate_tag
      - check_formatting
      - build
      - unit_tests
      - integration_tests
      - check_license
      - store_branch_versions:
          filters:
            branches:
              only:
                - main
      - increment_version:
          requires:
            - store_branch_versions
            - release
          filters:
            branches:
              only:
                - main
      - helm_e2e_tests:
          requires:
            - publish_manifest
      - static_e2e_tests:
          requires:
            - publish_manifest
      - publish_arm:
          requires:
            - generate_tag
          context:
            - dockerhub
      - publish_amd:
          requires:
            - generate_tag
          context:
            - dockerhub
      - publish_manifest:
          context:
            - dockerhub
          requires:
            - publish_amd
            - publish_arm
      - publish_manifest:
          name: publish_latest_manifest
          tag: latest
          filters:
            branches:
              only:
                - main
          context:
            - dockerhub
          requires:
            - check_license
            - generate_tag
            - chart_formatting
            - check_formatting
            - build
            - unit_tests
            - integration_tests
            - static_e2e_tests
            - helm_e2e_tests
      - release:
          filters:
            branches:
              only:
                - main
          requires:
            - store_branch_versions
            - publish_latest_manifest
      - build_documentation:
          filters:
            branches:
              ignore: main
          requires:
            - benchmark
      - document:
          filters:
            branches:
              only:
                - main
          requires:
            - store_branch_versions
            - release
            - benchmark

#-----------------------------------------------------------------------------------------------------------------------------

jobs:
  check_license:
    executor: rust
    steps:
      - checkout
      - run:
          name: Install cargo-deny
          command: cargo install --locked cargo-deny
      - run:
          name: Check for license
          command: cargo deny check licenses

  store_branch_versions:
    executor: node
    steps:
      - checkout_write
      - checkout_main
      - increment_version
      - run:
          name: Store versions
          command: |
            echo "export MAIN_VERSION=$(cat ./vault-kms-provider/Cargo.toml | grep -oP '^version = "\K[^"]+')" >> $BASH_ENV
            echo "export BRANCH_VERSION=$(cat ./Cargo.toml | grep -oP '^version = "\K[^"]+')" >> $BASH_ENV
      - run:
          name: Save environment
          command: |
            cp $BASH_ENV bash.env
            cat bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  increment_version:
    executor: node
    steps:
      - checkout_write
      - run:
          name: Install rust
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run:
          name: Configure git
          command: |
            git config --global user.email "ruddickmg@gmail.com"
            git config --global user.name "ruddickmg"
      - attach_workspace:
          at: .
      - run:
          name: Get version env variables
          command: cat bash.env >> $BASH_ENV
      - increment_version
      - run:
          name: Update main
          command: |
            if [ "$MAIN_VERSION" == "$BRANCH_VERSION" ]
            then
              echo "No version change, skipping"
            else
              source $HOME/.cargo/env
              cargo fetch
              git commit -a -m "[skip ci] increment version"
              git push -f origin main
            fi

  benchmark:
    executor: ubuntu
    steps:
      - checkout_write
      - run:
          name: Start vault
          command: docker compose up vault -d
      - rust/install
      - run:
          name: Enable transit
          command: docker compose exec vault vault secrets enable transit
      - run:
          name: Start KMS provider
          command: docker compose up vault-kms-provider -d
      - run:
          name: Build
          command: cargo bench --no-run
      - checkout_main
      - restore_cache:
          keys:
            - benchmarks-main-{{ checksum "vault-kms-provider/Cargo.toml" }}
      - run:
          name: Run benchmarks
          command: cargo bench
      - save_cache:
          key: benchmarks-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "Cargo.toml" }}
          paths:
            - target/criterion/vault-kms-provider
      - persist_to_workspace:
          root: ./target/criterion/vault-kms-provider
          paths:
            - decryption
            - encryption
            - health

  build_documentation:
    executor: node
    working_directory: ~/app/documentation
    steps:
      - checkout:
          path: ~/app
      - run:
          name: Install pnpm
          command: npm install -g pnpm
      - run:
          name: Install dependencies
          command: pnpm install
      - run:
          name: Install sass
          command: npm install -g sass
      - attach_workspace:
          at: .
      - run:
          name: Copy benchmarks into documentation
          command: |
            mv ./encryption/report ./src/benchmarks/encryption
            mv ./decryption/report ./src/benchmarks/decryption
            mv ./health/report ./src/benchmarks/health
      - run:
          name: Reformat index files
          command: |
            mv ./src/benchmarks/encryption/index.html ./src/benchmarks/encryption/index.njk
            mv ./src/benchmarks/decryption/index.html ./src/benchmarks/decryption/index.njk
            mv ./src/benchmarks/health/index.html ./src/benchmarks/health/index.njk
      - run:
          name: Build documentation
          command: pnpm run build

  document:
    executor: node
    working_directory: ~/app/documentation
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:ikYE/tBNMyIEGqxtAetAV3NW80GFZoioglYDTbyiNG0"
      - checkout:
          path: ~/app
      - run:
          name: Configure git
          command: |
            git remote set-url origin https://github.com/Ruddickmg/vault-kms-provider.git
            git config --global user.email "ruddickmg@gmail.com"
            git config --global user.name "ruddickmg"
      - run:
          name: Install pnpm
          command: npm install -g pnpm
      - run:
          name: Install dependencies
          command: pnpm install
      - run:
          name: Install github pages
          command: npm install -g gh-pages
      - run:
          name: Install sass
          command: npm install -g sass
      - attach_workspace:
          at: .
      - run:
          name: Copy benchmarks into documentation
          command: |
            mv ./encryption/report ./src/benchmarks/encryption
            mv ./decryption/report ./src/benchmarks/decryption
            mv ./health/report ./src/benchmarks/health
      - run:
          name: Reformat index files
          command: |
            mv ./src/benchmarks/encryption/index.html ./src/benchmarks/encryption/index.njk
            mv ./src/benchmarks/decryption/index.html ./src/benchmarks/decryption/index.njk
            mv ./src/benchmarks/health/index.html ./src/benchmarks/health/index.njk
      - run:
          name: Build documentation
          command: pnpm run build
      - run:
          name: Increment version
          command: |
            if [[ "$(git log -1 --pretty=%B)" != *"[skip ci] increment version"* ]]; then
              cd .. && node version/increment.js "$(git log -1 --pretty=%B)"
            fi
      - run:
          name: Get version env variables
          command: cat bash.env >> $BASH_ENV
      - run:
          name: Release documentation
          command: |
            export COMMIT_MESSAGE="$(git log -1 --pretty=%B)"
            export TRIMMED="${COMMIT_MESSAGE##*( )}"
            if [ "$MAIN_VERSION" != "$BRANCH_VERSION" ] || [ "${TRIMMED:0:4}" == "docs" ]
            then
              gh-pages -a -d dist -m "[skip ci] update documentation"
            fi

  release:
    executor: release
    steps:
      - run:
          name: Update
          command: apk update
      - run:
          name: Install bash
          command: apk add bash
      - run:
          name: Install ssh
          command: apk add openssh-client
      - run:
          name: Install node
          command: apk add --update nodejs npm
      - add_ssh_keys:
          fingerprints:
            - "SHA256:ikYE/tBNMyIEGqxtAetAV3NW80GFZoioglYDTbyiNG0"
      - checkout
      - run:
          name: Configure git
          command: |
            git remote set-url origin https://github.com/Ruddickmg/vault-kms-provider.git
            git config --global --unset url.ssh://git@github.com.insteadof
            git config --global user.email "ruddickmg@gmail.com"
            git config --global user.name "Marcus Ruddick"
      - increment_version
      - run:
          name: Package chart
          command: |
            cr package ./helm
      - attach_workspace:
          at: .
      - run:
          name: Get version env variables
          shell: "/bin/bash -eo pipefail"
          command: cat bash.env >> $BASH_ENV
      - run:
          name: Release chart
          shell: "/bin/bash -eo pipefail"
          command: |
            if [ "$MAIN_VERSION" == "$BRANCH_VERSION" ]
            then
              echo "No release needed, skipping"
            else
              cr upload --generate-release-notes --skip-existing \
                --commit $CIRCLE_BRANCH \
                --git-repo $CIRCLE_PROJECT_REPONAME \
                --owner $CIRCLE_PROJECT_USERNAME \
                --release-name-template "v{{ .Version }}" \
                --token $GITHUB_TOKEN
            fi
      - run:
          name: Add chart to gh-pages
          shell: "/bin/bash -eo pipefail"
          command: |
            if [ "$MAIN_VERSION" == "$BRANCH_VERSION" ]
            then
              echo "No release, skipping"
            else
              mkdir .cr-index
              cr index --push \
                --git-repo $CIRCLE_PROJECT_REPONAME \
                --owner $CIRCLE_PROJECT_USERNAME \
                --release-name-template "v{{ .Version }}" \
                --token $GITHUB_TOKEN
            fi

  build:
    executor: rust
    steps:
      - checkout_write
      - run:
          name: Update
          command: sudo apt-get update
      - run:
          name: Install proto
          command: sudo apt-get install protobuf-compiler
      - restore_cache:
          key: project-cache
      - run:
          name: Stable Build
          command: cargo build
      - save_cache:
          key: project-cache
          paths:
            - "~/.cargo"
            - "./target"

  generate_tag:
    executor: ubuntu_small
    steps:
      - checkout_write
      - run:
          name: Create workspace
          command: mkdir /tmp/workspace
      - run:
          name: Generate Tag
          command: |
            VERSION="v$(cat ./Cargo.toml | grep -oP '^version = "\K[^"]+')"
            TIME_STAMP="$(printf '%(%d.%m.%Y)T\n' -1)"
            TAG="$VERSION-$PIPELINE_NUM-$TIME_STAMP"
            echo $TAG >> /tmp/workspace/docker_tag
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - docker_tag

  check_formatting:
    executor: rust
    steps:
      - checkout_write
      - run:
          name: Check formatting
          command: cargo fmt -- --check

  chart_formatting:
    executor: chart_test
    steps:
      - checkout_write
      - run:
          name: Lint helm chart
          command: ct lint --all --chart-dirs .

  unit_tests:
    executor: ubuntu
    steps:
      - checkout_write
      - rust/install
      - run:
          name: Install coverage tool
          command: cargo install cargo-llvm-cov@0.6.13
      - run:
          name: Run unit tests
          command: cargo llvm-cov --bins --lib --all-features --workspace --lcov --output-path unit.coverage.info
      - codecov/upload:
          fail_on_error: true
          files: unit.coverage.info
          git_service: github
          upload_name: unit

  integration_tests:
    executor: ubuntu
    steps:
      - checkout_write
      - rust/install
      - run:
          name: Install coverage tool
          command: cargo install cargo-llvm-cov@0.6.13
      - run:
          name: Install just
          command: cargo install just
      - run:
          name: Set up environment
          command: just
      - run:
          name: Run integration tests
          command: cargo llvm-cov --test '*' --all-features --workspace --lcov --output-path integration.coverage.info
      - codecov/upload:
          fail_on_error: true
          files: integration.coverage.info
          git_service: github
          upload_name: integration

  helm_e2e_tests:
    executor: ubuntu
    environment:
      TRANSIT_POLICY: vault-kms-provider-transit-access
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      SOCKET_FILE: /mnt/vault-kms-provider.sock
      ENCRYPTION_CONFIG: /tmp/encryption/configuration.yaml
      INSTALL_K3S_VERSION: v1.32.1+k3s1
      K3S_DATASTORE_ENDPOINT: https://127.0.0.1:2379
      K3S_DATASTORE_CAFILE: /tmp/certs/ca.crt
      K3S_DATASTORE_CERTFILE: /tmp/certs/tls.crt
      K3S_DATASTORE_KEYFILE: /tmp/certs/tls.key
      ETCDCTL_ENDPOINTS: https://127.0.0.1:2379
      ETCDCTL_CACERT: /tmp/certs/ca.crt
      ETCDCTL_CERT: /tmp/certs/tls.crt
      ETCDCTL_KEY: /tmp/certs/tls.key
      ETCDCTL_API: 3
      CERTS: /tmp/certs
    steps:
      - checkout_write
      - attach_workspace:
          at: /tmp/workspace
      - helm/install_helm_client:
          version: v3.15.1
      - run:
          name: Set up certificates
          command: |
            cp -r ./test_files/certs $CERTS
            ls $CERTS
      - run:
          name: Run etcd
          command: docker compose -f ./test_files/docker-compose.etcd.yml up -d
      - run:
          name: Create encryption configuration file
          command: |
            mkdir /tmp/encryption
            helm template -s templates/configurations/encryption-configuration.yaml ./helm --set "encryption.output=true" --set "encryption.enabled=false" > $ENCRYPTION_CONFIG
      - run:
          name: Install k3s
          command: |
            curl -sfL https://get.k3s.io | sh -s - \
              --kube-apiserver-arg=encryption-provider-config=$ENCRYPTION_CONFIG \
              --kube-apiserver-arg=encryption-provider-config-automatic-reload=true
      - run:
          name: Grant permissions on kube config
          command: sudo chown $USER:$USER $KUBECONFIG
      - run:
          name: Create tls secret
          command: |
            kubectl create namespace vault
            kubectl -n vault create secret generic test-certs \
              --from-file=ca.crt=$CERTS/ca.crt \
              --from-file=tls.crt=$CERTS/tls.crt \
              --from-file=tls.key=$CERTS/tls.key
      - run:
          name: Deploy vault
          command: |
            helm repo add hashicorp https://helm.releases.hashicorp.com
            helm install vault hashicorp/vault -n vault --create-namespace -f test_files/vault/values.yaml
      - run:
          name: Wait for vault startup
          command: sleep 35
      - run:
          name: Initialize vault
          command: kubectl -n vault exec vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format="json" > keys.json
      - run:
          name: Set vault token
          command: |
            helm upgrade vault hashicorp/vault -n vault -f test_files/vault/values.yaml \
              --set "server.extraEnvironmentVars.VAULT_TOKEN=$(cat keys.json | jq -r .root_token)"
      - run:
          name: Restart vault
          command: kubectl delete pod vault-0 -n vault
      - run:
          name: Wait for vault startup
          command: sleep 5
      - run:
          name: Unseal vault
          command: |
            export UNSEAL_KEY=$(cat keys.json | jq -r .unseal_keys_b64[0]);
            kubectl -n vault exec vault-0 -- vault operator unseal $UNSEAL_KEY
      - run:
          name: Enable transit
          command: kubectl -n vault exec vault-0 -- vault secrets enable transit
      - run:
          name: Create policy for transit access
          command: |
            kubectl -n vault exec -i vault-0 -- vault policy write $TRANSIT_POLICY - \<< EOF
                $(cat ./policies/transit.hcl)
            EOF
            kubectl -n vault exec vault-0 -- vault policy read $TRANSIT_POLICY
      - run:
          name: Enable authentication
          command: kubectl -n vault exec vault-0 -- vault auth enable kubernetes
      - run:
          name: Configure authentication
          command: |
            kubectl -n vault exec vault-0 -- vault write auth/kubernetes/config \
              kubernetes_host="https://kubernetes.default.svc/"
            kubectl -n vault exec vault-0 -- vault read auth/kubernetes/config
      - run:
          name: Configure auth role
          command: |
            kubectl -n vault exec vault-0 -- vault write auth/kubernetes/role/vault-kms-provider \
                bound_service_account_names=vault-kms-provider \
                bound_service_account_namespaces=vault \
                alias_name_source=serviceaccount_name \
                audience=vault \
                token_policies=$TRANSIT_POLICY \
                ttl=1h
            kubectl -n vault exec vault-0 -- vault read auth/kubernetes/role/vault-kms-provider
      - run:
          name: Log requests
          command: kubectl -n vault exec vault-0 -- vault audit enable file file_path=stdout
      - run:
          name: Enable tls authentication
          command: kubectl -n vault exec vault-0 -- vault auth enable cert
      - run:
          name: Configure tls authentication
          command: |
            kubectl -n vault exec vault-0 -- vault write auth/cert/certs/vault-kms-provider \
                display_name=vault-kms-provider \
                policies=$TRANSIT_POLICY \
                certificate="$(cat ./test_files/certs/tls.crt)" \
                ttl=3600
      - run:
          name: Deploy vault-kms-provider
          command: |
            helm install vault-kms-provider ./helm -n vault -f test_files/values.yaml \
              --set "image.tag=$(cat /tmp/workspace/docker_tag)"
      - run:
          name: Wait for vault-kms-provider startup
          command: sleep 35
      - run:
          name: Update encryption configuration file
          command: |
            helm template -s templates/configurations/encryption-configuration.yaml ./helm --set "encryption.output=true" > $ENCRYPTION_CONFIG
      - run:
          name: Wait for startup
          command: sleep 35
      - run:
          name: Run e2e tests against helm deployment
          command: |
            helm test vault-kms-provider -n vault --logs

  static_e2e_tests:
    executor: ubuntu
    environment:
      TRANSIT_POLICY: vault-kms-provider-transit-access
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      SOCKET_FILE: /mnt/vault-kms-provider.sock
      ENCRYPTION_CONFIG: /tmp/encryption/configuration.yaml
      INSTALL_K3S_VERSION: v1.32.1+k3s1
      K3S_DATASTORE_ENDPOINT: https://127.0.0.1:2379
      K3S_DATASTORE_CAFILE: /tmp/certs/ca.crt
      K3S_DATASTORE_CERTFILE: /tmp/certs/tls.crt
      K3S_DATASTORE_KEYFILE: /tmp/certs/tls.key
      ETCDCTL_ENDPOINTS: https://127.0.0.1:2379
      ETCDCTL_CACERT: /tmp/certs/ca.crt
      ETCDCTL_CERT: /tmp/certs/tls.crt
      ETCDCTL_KEY: /tmp/certs/tls.key
      ETCDCTL_API: 3
      CERTS: /tmp/certs
    steps:
      - checkout_write
      - attach_workspace:
          at: /tmp/workspace
      - helm/install_helm_client:
          version: v3.15.1
      - run:
          name: Install rust
          command:  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run:
          name: Install just
          command: cargo install just
      - run:
          name: Set up certificates
          command: |
            cp -r ./test_files/certs $CERTS
            ls $CERTS
      - run:
          name: Run etcd
          command: docker compose -f ./test_files/docker-compose.etcd.yml up -d
      - run:
          name: Update image tag
          command: sed -i -e "s/vault-kms-provider:latest/vault-kms-provider:$(cat /tmp/workspace/docker_tag)/g" ./test_files/vault-kms-provider.yaml
      - run:
          name: Start vault
          command: just
      - run:
          name: Move socket file to mount directory
          command: sudo mv ./sockets/vault-kms-provider.sock /mnt/static-vault-kms-provider.sock
      - run:
          name: Set permissions on mount directory
          command: sudo chmod -R 777 /mnt
      - run:
          name: Add static configuration
          command: |
            sudo mkdir -p /var/lib/rancher/k3s/agent/pod-manifests
            sudo cp test_files/vault-kms-provider.yaml /var/lib/rancher/k3s/agent/pod-manifests/static-vault-kms-provider.yaml
      - run:
          name: Create encryption configuration file
          command: |
            mkdir /tmp/encryption
            helm template -s templates/configurations/encryption-configuration.yaml ./helm \
              --set "encryption.output=true" \
              --set "encryption.fallback=false" \
              --set "socket.name=static-vault-kms-provider.sock" > $ENCRYPTION_CONFIG
      - run:
          name: Install k3s
          command: |
            curl -sfL https://get.k3s.io | sh -s - \
              --kube-apiserver-arg=encryption-provider-config=$ENCRYPTION_CONFIG
      - run:
          name: Grant permissions on kube config
          command: sudo chown $USER:$USER $KUBECONFIG
      - run:
          name: Set up test infrastructure
          command: helm install vault-kms-provider ./helm -f test_files/values.yaml --create-namespace -n vault -set "replicas=0"
      - run:
          name: Run e2e tests against the static pod
          command: helm test vault-kms-provider -n vault --logs

  publish_amd:
    executor: ubuntu
    environment:
      ARCH: amd64
      PLATFORM: linux/amd64
    steps:
      - checkout_write
      - run:
          name: Log in to Docker
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build
          command: |
            TAG="$(cat /tmp/workspace/docker_tag)"
            docker build \
              --build-arg TARGETPLATFORM=$PLATFORM \
              -t "${DOCKERHUB_REPOSITORY}:${TAG}-${ARCH}" .
      - run:
          name: Publish
          command: |
            TAG="$(cat /tmp/workspace/docker_tag)"
            docker push "${DOCKERHUB_REPOSITORY}:${TAG}-${ARCH}"

  publish_arm:
    executor: arm_builder
    environment:
      ARCH: arm64
      PLATFORM: linux/arm64
    steps:
      - checkout_write
      - run:
          name: Log in to Docker
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build
          command: |
            TAG="$(cat /tmp/workspace/docker_tag)"
            docker build \
              --build-arg TARGETPLATFORM=$PLATFORM \
              -t "${DOCKERHUB_REPOSITORY}:${TAG}-${ARCH}" .
      - run:
          name: Publish
          command: |
            TAG="$(cat /tmp/workspace/docker_tag)"
            docker push "${DOCKERHUB_REPOSITORY}:${TAG}-${ARCH}"

  publish_manifest:
    executor: ubuntu
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    parameters:
      tag:
        default: ""
        description: "Tag for the manifest"
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Log in to Docker
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Create Manifest
          command: |
            export TAG="$(cat /tmp/workspace/docker_tag)"
            if [[ -z "<< parameters.tag >>" ]]; then
              export LABEL=$TAG
            else
              export LABEL="<< parameters.tag >>"
            fi
            REPO="$DOCKERHUB_REPOSITORY:$TAG"
            docker manifest create $DOCKERHUB_REPOSITORY:$LABEL \
              --amend "${REPO}-arm64" \
              --amend "${REPO}-amd64"
      - run:
          name: Show Manifest
          command: |
            if [[ -z "<< parameters.tag >>" ]]; then
              export TAG="$(cat /tmp/workspace/docker_tag)"
            else
              export TAG="<< parameters.tag >>"
            fi
            docker manifest inspect "${DOCKERHUB_REPOSITORY}:${TAG}"
      - run:
          name: Publish Manifest
          command: |
            if [[ -z "<< parameters.tag >>" ]]; then
              export TAG="$(cat /tmp/workspace/docker_tag)"
            else
              export TAG="<< parameters.tag >>"
            fi
            docker manifest push "${DOCKERHUB_REPOSITORY}:${TAG}"
